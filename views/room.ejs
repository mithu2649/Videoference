<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Videoference</title>
    <script>
        const ROOM_ID = "<%= roomId %>"
    </script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js" defer></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="script.js" defer></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="styles.css">
</head>

<body>
    <div id="overlay"></div>
    <div id="call-ui">
        <div id="video-grid" style="opacity:0">
        </div>
        <div id="end-call" style="display: none"><i class="fa fa-phone"></i></div>
        <div id="user-disconnected-msg"><i class="fa fa-user"> &nbsp; </i>User Disconnected!</div>

        <div id="loading-components">
            <div id="loading-animation">
                <span class="loader loader0"><i class="fa fa-circle-thin"></i></span>
                <span class="loader loader2"><i class="fa fa-dot-circle-o"></i></span>
                <span class="loader loader0"><i class="fa fa-circle-thin"></i></span>
            </div>
            <div id="invite-info">
                <div class="room-id-container">
                    <span id="myRoomId"></span>
                    <p>Ask someone to join using your code</p>
                </div>

                <div id="share-link">
                    <div id="roominfo"><br>
                        <div class="tiny-bold">It's lonely here!</div>
                        <div class="tiny">Invite Someone to talk to...</div><br>
                    </div>
                    <button id="invite-btn">Invite</button>
                </div>
            </div>
        </div>
    </div>

    <script defer>
        let endCallBtn = document.querySelector('#end-call');

        document.querySelector('#myRoomId')
            .innerHTML = window.location.pathname.slice(1);

        const shareData = {
            title: 'Videoference',
            text: 'Hey, join me on Videoference!',
            url: window.location.href + '?action=join',
        }
        const btn = document.querySelector('#invite-btn');
        const resultPara = document.querySelector('.tiny-bold');

        // Must be triggered by some kind of "user activation"
        btn.addEventListener('click', async () => {
            try {
                await navigator.share(shareData)
                resultPara.textContent = 'Invited!';
                document.querySelector('.tiny').remove();
            } catch (err) {
                resultPara.textContent = 'Function not supported on this device!';
                resultPara.style.fontSize = '10px'
                document.querySelector('.tiny').textContent = 'Share your invite code instead!'
            }
        });


        let elem = document.documentElement;
        let isFullScreenOn = false;

        function openFullscreen() {
            if (elem.requestFullscreen) {
                elem.requestFullscreen();
            } else if (elem.webkitRequestFullscreen) { /* Safari */
                elem.webkitRequestFullscreen();
            } else if (elem.msRequestFullscreen) { /* IE11 */
                elem.msRequestFullscreen();
            }

            isFullScreenOn = true;
        }

        function exitFullscreen() {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.webkitExitFullscreen) { /* Safari */
                document.webkitExitFullscreen();
            } else if (document.msExitFullscreen) { /* IE11 */
                document.msExitFullscreen();
            }

            isFullScreenOn = false;
        }

        document.querySelector('#overlay')
            .addEventListener('click', () => {

                isFullScreenOn ? exitFullscreen() : openFullscreen();


                if (isFullScreenOn) {
                    endCallBtn.style.opacity = 0;
                } else {
                    endCallBtn.style.opacity = 9;
                }
            });



        endCallBtn.addEventListener('click', () => {
            window.location.href = "/"
        });




        const checkElement = async selector => {
            while (document.querySelector(selector) === null) {
                await new Promise(resolve => requestAnimationFrame(resolve))
            }
            return document.querySelector(selector);
        };

        checkElement('#myVideo').then((selector) => {
            //dragging myVideo
            var offset = [0, 0];
            var divOverlay = selector;
            var isDown = false;
            divOverlay.addEventListener('mousedown', function (e) {
                isDown = true;
                offset = [
                    divOverlay.offsetLeft - e.clientX,
                    divOverlay.offsetTop - e.clientY
                ];
            }, true);
            document.addEventListener('mouseup', function () {
                isDown = false;
            }, true);

            document.addEventListener('mousemove', function (e) {
                event.preventDefault();
                if (isDown) {
                    divOverlay.style.left = (e.clientX + offset[0]) + 'px';
                    divOverlay.style.top = (e.clientY + offset[1]) + 'px';
                }
            }, true);

            //for android/mobile support
            divOverlay.addEventListener('touchstart', function (e) {
                e.preventDefault();
                isDown = true;
                offset = [
                    divOverlay.offsetLeft - e.touches[0].clientX,
                    divOverlay.offsetTop  - e.touches[0].clientY
                ];
            }, {passive: false});
            document.addEventListener('touchend', function () {
                isDown = false;
            });

            document.addEventListener('touchmove', function (e) {
                e.preventDefault();
                if (isDown) {
                    divOverlay.style.left = (e.touches[0].clientX + offset[0]) + 'px';
                    divOverlay.style.top  = (e.touches[0].clientY + offset[1]) + 'px';
                }
            }, {passive: false});

        });




    </script>
</body>

</html>